import pygame as pg


_ = False

mini_map_base = [
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
[1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],
[1, _, _, 1, 1, 1, 1, _, _, _, 2, 2, 2, _, _, 1],
[1, _, _, _, _, _, 1, _, _, _, _, _, 2, _, _, 1],
[1, _, _, _, _, _, 1, _, _, _, _, _, 2, _, _, 1],
[1, _, _, 1, 1, 1, 1, _, _, _, _, _, _, _, _, 1],
[1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],
[1, _, _, _, 1, _, _, _, 1, _, _, _, _, _, _, 1],
[1, 1, 1, 1, 1, 3, 1, 1, 1, 1, _, _, 1, 1, 1, 1],
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, _, _, 1, 1, 1, 1],
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, _, _, 1, 1, 1, 1],
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, _, _, 1, 1, 1, 1],
[1, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],
[1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],
[1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],
[1, _, _, 1, _, _, _, _, _, 1, 1, _, 1, 1, _, 1],
[1, _, _, 1, _, _, _, _, _, _, 1, _, 1, _, _, 1],
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
]


mini_map_main = [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],
    [1, _, _, 3, 3, 3, 3, _, _, _, 2, 2, 2, _, _, 1],
    [1, _, _, _, _, _, 4, _, _, _, _, _, 2, _, _, 1],
    [1, _, _, _, _, _, 4, _, _, _, _, _, 2, _, _, 1],
    [1, _, _, 3, 3, 3, 3, _, _, _, _, _, _, _, _, 1],
    [1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],
    [1, _, _, _, 4, _, _, _, 4, _, _, _, _, _, _, 1],
    [1, 1, 1, 3, 1, 3, 1, 1, 1, 3, _, _, 3, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 3, _, _, 3, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 3, _, _, 3, 1, 1, 1],
    [1, 1, 3, 1, 1, 1, 1, 1, 1, 3, _, _, 3, 1, 1, 1],
    [1, 4, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],
    [3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],
    [1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],
    [1, _, _, 2, _, _, _, _, _, 3, 4, _, 4, 3, _, 1],
    [1, _, _, 5, _, _, _, _, _, _, 3, _, 3, _, _, 1],
    [1, _, _, 2, _, _, _, _, _, _, _, _, _, _, _, 1],
    [1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],
    [3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],
    [1, 4, _, _, _, _, _, _, 4, _, _, 4, _, _, _, 1],
    [1, 1, 3, 3, _, _, 3, 3, 1, 3, 3, 1, 3, 1, 1, 1],
    [1, 1, 1, 3, _, _, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 3, 3, 4, _, _, 4, 3, 3, 3, 3, 3, 3, 3, 3, 1],
    [3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3],
    [3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3],
    [3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3],
    [3, _, _, 5, _, _, _, 5, _, _, _, 5, _, _, _, 3],
    [3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3],
    [3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3],
    [3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3],
    [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
    ]


class Map:
    def __init__(self, game):
        self.game = game
        self.mini_map = mini_map_base
        self.gamestate = 'base'
        self.world_map = {}
        self.rows = len(self.mini_map)
        self.cols = len(self.mini_map[0])
        self.get_map()
        
        
    

        
        
    def get_map(self):
        
        if self.gamestate == 'main' and self.mini_map != mini_map_main:
            self.screen.fill('black')
            self.world_map = []
            self.mini_map = mini_map_main
            for j, row in enumerate(self.mini_map):
                for i, value in enumerate(row):
                    if value:
                        self.world_map[(i, j)] = value      
            self.get_map()
            self.draw()

        if self.gamestate == 'base' and self.mini_map != mini_map_base:
            self.screen.fill('black')
            self.world_map = []
            self.mini_map = mini_map_base
            for j, row in enumerate(self.mini_map):
                for i, value in enumerate(row):
                    if value:
                        self.world_map[(i, j)] = value      
            self.get_map()
            self.draw()


        def draw(self):
            [pg.draw.rect(self.game.screen, 'darkgray', (pos[0] * 100, pos[1] * 100, 100, 100), 2)
         for pos in self.world_map]
        

